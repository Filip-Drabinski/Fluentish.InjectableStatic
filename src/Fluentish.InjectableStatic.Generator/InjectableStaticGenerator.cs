using Fluentish.InjectableStatic.Generator.Attributes;
using Fluentish.InjectableStatic.Generator.Extensions;
using Fluentish.InjectableStatic.Generator.ValueProviders;
using Microsoft.CodeAnalysis;
using System.Text;
namespace Fluentish.InjectableStatic.Generator
{
    [Generator]
    public class InjectableStaticGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {

            context.RegisterPostInitializationOutput(context =>
            {
                context.AddInjectableStaticAttribute();
                context.AddInjectableStaticConfigurationAttribute();
            });

            var namespacePrefixProvider = context.GetInjectableStaticConfigurationProvider();

            var injectableClassInfoProvider = context.GetInjectableClassInfoProvider();

            var infoProvider = injectableClassInfoProvider
                .Combine(namespacePrefixProvider);

            var modelProvider = infoProvider.GetClassModelProvider();

            context.RegisterSourceOutput(modelProvider, ProcessModels);
        }

        private static void ProcessModels(SourceProductionContext SourceProductionContext, Models.ClassModel model)
        {
            var indentationDepth = 0;

            var interfaceHint = $"I{model.Name}.g.cs";
            var interfaceBuilder = new StringBuilder()
                .Append("// <auto-generated />").Append(model.EndLine);

            var implementationHint = $"{model.Name}.g.cs";
            var implementationBuilder = new StringBuilder()
                .Append("// <auto-generated />").Append(model.EndLine);

            if (model.RequireNullable)
            {
                interfaceBuilder
                    .Append("#nullable enable").Append(model.EndLine);

                implementationBuilder
                    .Append("#nullable enable").Append(model.EndLine);
            }

            interfaceBuilder
                .Append("#pragma warning disable").Append(model.EndLine);
            implementationBuilder
                .Append("#pragma warning disable").Append(model.EndLine);

            if (!string.IsNullOrWhiteSpace(model.Namespace))
            {
                interfaceBuilder
                    .Append("namespace ").Append(model.Namespace).Append(model.EndLine)
                    .Append("{").Append(model.EndLine);

                implementationBuilder
                    .Append("namespace ").Append(model.Namespace).Append(model.EndLine)
                    .Append("{").Append(model.EndLine);

                indentationDepth++;
            }

            interfaceBuilder
                .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName).Append(model.EndLine);
            implementationBuilder
                .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName).Append(model.EndLine)
                .AppendIndentation(indentationDepth).Append("[global::System.Diagnostics.DebuggerStepThrough]").Append(model.EndLine);

            interfaceBuilder
                .AppendIndentation(indentationDepth).Append("public ").AppendIf(model.IsUnsafe, "unsafe ").Append("interface I").Append(model.Name);
            implementationBuilder
                .AppendIndentation(indentationDepth).Append("public ").AppendIf(model.IsUnsafe, "unsafe ").Append("class ").Append(model.Name).Append("Service");

            if (model.GenericArguments.Length > 0)
            {
                interfaceBuilder
                    .AppendTypeGenericArguments(model.GenericArguments);
                implementationBuilder
                    .AppendTypeGenericArguments(model.GenericArguments);
            }

            implementationBuilder
                .Append(" : I").Append(model.Name);

            if (model.GenericArguments.Length == 0)
            {
                implementationBuilder.Append(model.EndLine);
            }
            else if (model.GenericArguments.Length > 0)
            {
                implementationBuilder
                    .AppendTypeGenericArguments(model.GenericArguments);

                indentationDepth++;

                interfaceBuilder
                    .AppendTypeGenericConstraint(model.GenericArguments, indentationDepth, model.EndLine);
                implementationBuilder
                    .AppendTypeGenericConstraint(model.GenericArguments, indentationDepth, model.EndLine)
                    .Append(model.EndLine);

                indentationDepth--;
            }

            interfaceBuilder.Append(model.EndLine)
                .AppendIndentation(indentationDepth).Append("{");
            implementationBuilder
                .AppendIndentation(indentationDepth).Append("{");

            indentationDepth++;
            foreach (var member in model.Properties)
            {
                interfaceBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);

                interfaceBuilder
                    .AppendIndentation(indentationDepth).Append(member.Type).Append(" ").Append(member.Name).Append(" {");
                implementationBuilder
                    .AppendIndentation(indentationDepth).Append("public ").Append(member.Type).Append(" ").Append(member.Name).Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("{");

                indentationDepth++;

                if (member.IsReadable)
                {
                    interfaceBuilder
                        .Append(" get;");

                    implementationBuilder
                        .Append(model.EndLine)
                        .AppendIndentation(indentationDepth).Append("get => ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).Append(";");
                }

                if (member.IsMutable)
                {
                    interfaceBuilder
                        .Append(" set;");
                    implementationBuilder
                        .Append(model.EndLine)
                        .AppendIndentation(indentationDepth).Append("set => ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).Append(" = value;");
                }

                indentationDepth--;

                interfaceBuilder
                    .Append(" }").Append(model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("}").Append(model.EndLine);

            }

            foreach (var member in model.Events)
            {
                interfaceBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);

                interfaceBuilder
                    .AppendIndentation(indentationDepth).Append("event ").Append(member.Type).Append(" ").Append(member.Name).Append(";");
                implementationBuilder
                    .AppendIndentation(indentationDepth).Append("public event ").Append(member.Type).Append(" ").Append(member.Name).Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("{");

                indentationDepth++;

                if (member.IsAddable)
                {
                    implementationBuilder
                        .Append(model.EndLine)
                        .AppendIndentation(indentationDepth).Append("add => ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).Append(" += value;");
                }

                if (member.IsRemovable)
                {
                    implementationBuilder
                        .Append(model.EndLine)
                        .AppendIndentation(indentationDepth).Append("remove => ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).Append(" -= value;");
                }

                indentationDepth--;

                interfaceBuilder
                    .Append(model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("}").Append(model.EndLine);
            }

            foreach (var member in model.Fields)
            {
                interfaceBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);

                interfaceBuilder
                    .AppendIndentation(indentationDepth).Append(member.Type).Append(" ").Append(member.Name).Append(" {");
                implementationBuilder
                    .AppendIndentation(indentationDepth).Append("public ").Append(member.Type).Append(" ").Append(member.Name).Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("{");

                indentationDepth++;

                interfaceBuilder
                    .Append(" get;");
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("get => ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).Append(";");

                if (member.IsMutable)
                {
                    interfaceBuilder
                        .Append(" set;");
                    implementationBuilder
                        .Append(model.EndLine)
                        .AppendIndentation(indentationDepth).Append("set => ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).Append(" = value;");
                }

                indentationDepth--;

                interfaceBuilder
                    .Append(" }").Append(model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("}").Append(model.EndLine);
            }

            foreach (var member in model.Methods)
            {
                interfaceBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("[global::System.Diagnostics.DebuggerStepThrough]").Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]").Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);
                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).AppendInheridoc(model.OriginalTypeFullName, member.Name).Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("[global::System.Diagnostics.DebuggerStepThrough]").Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]").Append(model.EndLine)
                    .AppendAttributes(member.Attributes, indentationDepth, model.EndLine);

                interfaceBuilder
                    .AppendIndentation(indentationDepth).Append(member.ReturnType).Append(" ").Append(member.Name).AppendTypeGenericArguments(member.GenericArguments).Append("(");
                implementationBuilder
                    .AppendIndentation(indentationDepth).Append("public ").Append(member.ReturnType).Append(" ").Append(member.Name).AppendTypeGenericArguments(member.GenericArguments).Append("(");

                for (int i = 0; i < member.Parameters.Length; i++)
                {
                    if (i > 0)
                    {
                        interfaceBuilder
                            .Append(", ");
                        implementationBuilder
                            .Append(", ");
                    }

                    interfaceBuilder
                        .AppendAttributes(member.Parameters[i].Attributes).AppendIf(!string.IsNullOrWhiteSpace(member.Parameters[i].Modifier), member.Parameters[i].Modifier).Append(member.Parameters[i].Type).Append(" ").Append(member.Parameters[i].Name);
                    implementationBuilder
                        .AppendAttributes(member.Parameters[i].Attributes).AppendIf(!string.IsNullOrWhiteSpace(member.Parameters[i].Modifier), member.Parameters[i].Modifier).Append(member.Parameters[i].Type).Append(" ").Append(member.Parameters[i].Name);

                }

                interfaceBuilder
                    .Append(")");
                implementationBuilder
                    .Append(")");

                indentationDepth++;
                if (member.GenericArguments.Length > 0)
                {
                    interfaceBuilder
                        .AppendTypeGenericConstraint(member.GenericArguments, indentationDepth, model.EndLine);
                    implementationBuilder
                        .AppendTypeGenericConstraint(member.GenericArguments, indentationDepth, model.EndLine);

                }

                implementationBuilder
                    .Append(model.EndLine)
                    .AppendIndentation(indentationDepth).Append("=> ").Append(model.OriginalTypeFullName).Append(".").Append(member.Name).AppendTypeGenericArguments(member.GenericArguments).Append("(");


                for (int i = 0; i < member.Parameters.Length; i++)
                {
                    if (i > 0)
                    {
                        implementationBuilder
                            .Append(", ");
                    }

                    implementationBuilder
                        .AppendIf(!string.IsNullOrWhiteSpace(member.Parameters[i].Modifier) && member.Parameters[i].Modifier != "params ", member.Parameters[i].Modifier).Append(member.Parameters[i].Name);
                }

                implementationBuilder
                    .Append(")");

                interfaceBuilder
                    .Append(";").Append(model.EndLine);
                implementationBuilder
                    .Append(";").Append(model.EndLine);

                indentationDepth--;
            }

            indentationDepth--;

            interfaceBuilder
                .Append(model.EndLine)
                .AppendIndentation(indentationDepth).Append("}").Append(model.EndLine);
            implementationBuilder
                .Append(model.EndLine)
                .AppendIndentation(indentationDepth).Append("}").Append(model.EndLine);

            if (!string.IsNullOrWhiteSpace(model.Namespace))
            {
                interfaceBuilder
                    .Append("}").Append(model.EndLine);
                implementationBuilder
                    .Append("}").Append(model.EndLine);
            }

            interfaceBuilder
                .Append("#pragma warning restore").Append(model.EndLine);
            implementationBuilder
                .Append("#pragma warning restore").Append(model.EndLine);

            var interfaceSource = interfaceBuilder.ToString();
            var implementationSource = implementationBuilder.ToString();

            SourceProductionContext.AddSource(interfaceHint, interfaceSource);
            SourceProductionContext.AddSource(implementationHint, implementationSource);
        }
    }
}