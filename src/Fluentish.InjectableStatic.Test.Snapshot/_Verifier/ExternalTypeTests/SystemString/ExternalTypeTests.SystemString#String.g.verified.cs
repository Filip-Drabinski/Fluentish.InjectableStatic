//HintName: String.g.cs
// <auto-generated />
#nullable enable
#pragma warning disable
namespace Fluentish.Injectable.System
{
    /// <inheritdoc cref="string"/>
    [global::System.Diagnostics.DebuggerStepThrough]
    public class StringService : IString
    {
        /// <inheritdoc cref="string.Empty"/>
        public string Empty
        {
            get => string.Empty;
        }

        /// <inheritdoc cref="string.Intern"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Intern(string str) => string.Intern(str);

        /// <inheritdoc cref="string.IsInterned"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string? IsInterned(string str) => string.IsInterned(str);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, string? strB) => string.Compare(strA, strB);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, string? strB, bool ignoreCase) => string.Compare(strA, strB, ignoreCase);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, string? strB, global::System.StringComparison comparisonType) => string.Compare(strA, strB, comparisonType);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, string? strB, global::System.Globalization.CultureInfo? culture, global::System.Globalization.CompareOptions options) => string.Compare(strA, strB, culture, options);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, string? strB, bool ignoreCase, global::System.Globalization.CultureInfo? culture) => string.Compare(strA, strB, ignoreCase, culture);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, int indexA, string? strB, int indexB, int length) => string.Compare(strA, indexA, strB, indexB, length);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, int indexA, string? strB, int indexB, int length, bool ignoreCase) => string.Compare(strA, indexA, strB, indexB, length, ignoreCase);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, int indexA, string? strB, int indexB, int length, bool ignoreCase, global::System.Globalization.CultureInfo? culture) => string.Compare(strA, indexA, strB, indexB, length, ignoreCase, culture);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, int indexA, string? strB, int indexB, int length, global::System.Globalization.CultureInfo? culture, global::System.Globalization.CompareOptions options) => string.Compare(strA, indexA, strB, indexB, length, culture, options);

        /// <inheritdoc cref="string.Compare"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int Compare(string? strA, int indexA, string? strB, int indexB, int length, global::System.StringComparison comparisonType) => string.Compare(strA, indexA, strB, indexB, length, comparisonType);

        /// <inheritdoc cref="string.CompareOrdinal"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int CompareOrdinal(string? strA, string? strB) => string.CompareOrdinal(strA, strB);

        /// <inheritdoc cref="string.CompareOrdinal"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int CompareOrdinal(string? strA, int indexA, string? strB, int indexB, int length) => string.CompareOrdinal(strA, indexA, strB, indexB, length);

        /// <inheritdoc cref="string.Equals"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool Equals(string? a, string? b) => string.Equals(a, b);

        /// <inheritdoc cref="string.Equals"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool Equals(string? a, string? b, global::System.StringComparison comparisonType) => string.Equals(a, b, comparisonType);

        /// <inheritdoc cref="string.GetHashCode"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int GetHashCode(global::System.ReadOnlySpan<char> value) => string.GetHashCode(value);

        /// <inheritdoc cref="string.GetHashCode"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public int GetHashCode(global::System.ReadOnlySpan<char> value, global::System.StringComparison comparisonType) => string.GetHashCode(value, comparisonType);

        /// <inheritdoc cref="string.Create"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Create<TState>(int length, TState state, global::System.Buffers.SpanAction<char, TState> action) => string.Create<TState>(length, state, action);

        /// <inheritdoc cref="string.Create"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Create(global::System.IFormatProvider? provider, ref global::System.Runtime.CompilerServices.DefaultInterpolatedStringHandler handler) => string.Create(provider, ref handler);

        /// <inheritdoc cref="string.Create"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Create(global::System.IFormatProvider? provider, global::System.Span<char> initialBuffer, ref global::System.Runtime.CompilerServices.DefaultInterpolatedStringHandler handler) => string.Create(provider, initialBuffer, ref handler);

        /// <inheritdoc cref="string.Copy"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never), global::System.ObsoleteAttribute("This API should not be used to create mutable strings. See https://go.microsoft.com/fwlink/?linkid=2084035 for alternatives.")] 
        public string Copy(string str) => string.Copy(str);

        /// <inheritdoc cref="string.IsNullOrEmpty"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool IsNullOrEmpty([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(false)] string? value) => string.IsNullOrEmpty(value);

        /// <inheritdoc cref="string.IsNullOrWhiteSpace"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool IsNullOrWhiteSpace([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(false)] string? value) => string.IsNullOrWhiteSpace(value);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(object? arg0) => string.Concat(arg0);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(object? arg0, object? arg1) => string.Concat(arg0, arg1);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(object? arg0, object? arg1, object? arg2) => string.Concat(arg0, arg1, arg2);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(params object?[] args) => string.Concat(args);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat<T>(global::System.Collections.Generic.IEnumerable<T> values) => string.Concat<T>(values);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(global::System.Collections.Generic.IEnumerable<string?> values) => string.Concat(values);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(string? str0, string? str1) => string.Concat(str0, str1);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(string? str0, string? str1, string? str2) => string.Concat(str0, str1, str2);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(string? str0, string? str1, string? str2, string? str3) => string.Concat(str0, str1, str2, str3);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(global::System.ReadOnlySpan<char> str0, global::System.ReadOnlySpan<char> str1) => string.Concat(str0, str1);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(global::System.ReadOnlySpan<char> str0, global::System.ReadOnlySpan<char> str1, global::System.ReadOnlySpan<char> str2) => string.Concat(str0, str1, str2);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(global::System.ReadOnlySpan<char> str0, global::System.ReadOnlySpan<char> str1, global::System.ReadOnlySpan<char> str2, global::System.ReadOnlySpan<char> str3) => string.Concat(str0, str1, str2, str3);

        /// <inheritdoc cref="string.Concat"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Concat(params string?[] values) => string.Concat(values);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format([global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, object? arg0) => string.Format(format, arg0);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format([global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, object? arg0, object? arg1) => string.Format(format, arg0, arg1);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format([global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, object? arg0, object? arg1, object? arg2) => string.Format(format, arg0, arg1, arg2);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format([global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, params object?[] args) => string.Format(format, args);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format(global::System.IFormatProvider? provider, [global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, object? arg0) => string.Format(provider, format, arg0);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format(global::System.IFormatProvider? provider, [global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, object? arg0, object? arg1) => string.Format(provider, format, arg0, arg1);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format(global::System.IFormatProvider? provider, [global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, object? arg0, object? arg1, object? arg2) => string.Format(provider, format, arg0, arg1, arg2);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format(global::System.IFormatProvider? provider, [global::System.Diagnostics.CodeAnalysis.StringSyntaxAttribute("CompositeFormat")] string format, params object?[] args) => string.Format(provider, format, args);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format<TArg0>(global::System.IFormatProvider? provider, global::System.Text.CompositeFormat format, TArg0 arg0) => string.Format<TArg0>(provider, format, arg0);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format<TArg0, TArg1>(global::System.IFormatProvider? provider, global::System.Text.CompositeFormat format, TArg0 arg0, TArg1 arg1) => string.Format<TArg0, TArg1>(provider, format, arg0, arg1);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format<TArg0, TArg1, TArg2>(global::System.IFormatProvider? provider, global::System.Text.CompositeFormat format, TArg0 arg0, TArg1 arg1, TArg2 arg2) => string.Format<TArg0, TArg1, TArg2>(provider, format, arg0, arg1, arg2);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format(global::System.IFormatProvider? provider, global::System.Text.CompositeFormat format, params object?[] args) => string.Format(provider, format, args);

        /// <inheritdoc cref="string.Format"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Format(global::System.IFormatProvider? provider, global::System.Text.CompositeFormat format, global::System.ReadOnlySpan<object?> args) => string.Format(provider, format, args);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(char separator, params string?[] value) => string.Join(separator, value);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(string? separator, params string?[] value) => string.Join(separator, value);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(char separator, string?[] value, int startIndex, int count) => string.Join(separator, value, startIndex, count);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(string? separator, string?[] value, int startIndex, int count) => string.Join(separator, value, startIndex, count);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(string? separator, global::System.Collections.Generic.IEnumerable<string?> values) => string.Join(separator, values);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(char separator, params object?[] values) => string.Join(separator, values);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join(string? separator, params object?[] values) => string.Join(separator, values);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join<T>(char separator, global::System.Collections.Generic.IEnumerable<T> values) => string.Join<T>(separator, values);

        /// <inheritdoc cref="string.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public string Join<T>(string? separator, global::System.Collections.Generic.IEnumerable<T> values) => string.Join<T>(separator, values);

    }
}
#pragma warning restore
