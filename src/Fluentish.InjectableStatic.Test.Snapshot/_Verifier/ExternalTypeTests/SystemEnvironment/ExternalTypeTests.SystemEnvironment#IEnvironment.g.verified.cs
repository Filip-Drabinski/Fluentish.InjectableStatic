//HintName: IEnvironment.g.cs
// <auto-generated />
#nullable enable
#pragma warning disable
namespace Fluentish.Injectable.System
{
    /// <inheritdoc cref="global::System.Environment"/>
    public interface IEnvironment
    {
        /// <inheritdoc cref="global::System.Environment.Exit"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute()] 
        void Exit(int exitCode);

        /// <inheritdoc cref="global::System.Environment.FailFast"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute()] 
        void FailFast(string? message);

        /// <inheritdoc cref="global::System.Environment.FailFast"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute()] 
        void FailFast(string? message, global::System.Exception? exception);

        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetEnvironmentVariable(string variable);

        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetEnvironmentVariable(string variable, global::System.EnvironmentVariableTarget target);

        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.Collections.IDictionary GetEnvironmentVariables(global::System.EnvironmentVariableTarget target);

        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void SetEnvironmentVariable(string variable, string? value);

        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void SetEnvironmentVariable(string variable, string? value, global::System.EnvironmentVariableTarget target);

        /// <inheritdoc cref="global::System.Environment.GetCommandLineArgs"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string[] GetCommandLineArgs();

        /// <inheritdoc cref="global::System.Environment.ExpandEnvironmentVariables"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string ExpandEnvironmentVariables(string name);

        /// <inheritdoc cref="global::System.Environment.GetFolderPath"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetFolderPath(global::System.Environment.SpecialFolder folder);

        /// <inheritdoc cref="global::System.Environment.GetFolderPath"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetFolderPath(global::System.Environment.SpecialFolder folder, global::System.Environment.SpecialFolderOption option);

        /// <inheritdoc cref="global::System.Environment.GetLogicalDrives"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string[] GetLogicalDrives();

        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.Collections.IDictionary GetEnvironmentVariables();

        /// <inheritdoc cref="global::System.Environment.CurrentManagedThreadId"/>
        int CurrentManagedThreadId { get; }

        /// <inheritdoc cref="global::System.Environment.ExitCode"/>
        int ExitCode { get; set; }

        /// <inheritdoc cref="global::System.Environment.TickCount"/>
        int TickCount { get; }

        /// <inheritdoc cref="global::System.Environment.TickCount64"/>
        long TickCount64 { get; }

        /// <inheritdoc cref="global::System.Environment.ProcessorCount"/>
        int ProcessorCount { get; }

        /// <inheritdoc cref="global::System.Environment.IsPrivilegedProcess"/>
        bool IsPrivilegedProcess { get; }

        /// <inheritdoc cref="global::System.Environment.HasShutdownStarted"/>
        bool HasShutdownStarted { get; }

        /// <inheritdoc cref="global::System.Environment.CommandLine"/>
        string CommandLine { get; }

        /// <inheritdoc cref="global::System.Environment.CurrentDirectory"/>
        string CurrentDirectory { get; set; }

        /// <inheritdoc cref="global::System.Environment.ProcessId"/>
        int ProcessId { get; }

        /// <inheritdoc cref="global::System.Environment.ProcessPath"/>
        string? ProcessPath { get; }

        /// <inheritdoc cref="global::System.Environment.Is64BitProcess"/>
        bool Is64BitProcess { get; }

        /// <inheritdoc cref="global::System.Environment.Is64BitOperatingSystem"/>
        bool Is64BitOperatingSystem { get; }

        /// <inheritdoc cref="global::System.Environment.NewLine"/>
        string NewLine { get; }

        /// <inheritdoc cref="global::System.Environment.OSVersion"/>
        global::System.OperatingSystem OSVersion { get; }

        /// <inheritdoc cref="global::System.Environment.Version"/>
        global::System.Version Version { get; }

        /// <inheritdoc cref="global::System.Environment.StackTrace"/>
        string StackTrace { get; }

        /// <inheritdoc cref="global::System.Environment.SystemPageSize"/>
        int SystemPageSize { get; }

        /// <inheritdoc cref="global::System.Environment.UserName"/>
        string UserName { get; }

        /// <inheritdoc cref="global::System.Environment.UserDomainName"/>
        string UserDomainName { get; }

        /// <inheritdoc cref="global::System.Environment.MachineName"/>
        string MachineName { get; }

        /// <inheritdoc cref="global::System.Environment.SystemDirectory"/>
        string SystemDirectory { get; }

        /// <inheritdoc cref="global::System.Environment.UserInteractive"/>
        bool UserInteractive { get; }

        /// <inheritdoc cref="global::System.Environment.WorkingSet"/>
        long WorkingSet { get; }

    }
}
#pragma warning restore
