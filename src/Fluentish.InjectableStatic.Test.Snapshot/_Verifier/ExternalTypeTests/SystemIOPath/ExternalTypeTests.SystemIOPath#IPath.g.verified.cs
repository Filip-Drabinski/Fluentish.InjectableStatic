//HintName: IPath.g.cs
// <auto-generated />
#nullable enable
#pragma warning disable
namespace Fluentish.Injectable.System.IO
{
    /// <inheritdoc cref="global::System.IO.Path"/>
    public interface IPath
    {
        /// <inheritdoc cref="global::System.IO.Path.DirectorySeparatorChar"/>
        char DirectorySeparatorChar { get; }

        /// <inheritdoc cref="global::System.IO.Path.AltDirectorySeparatorChar"/>
        char AltDirectorySeparatorChar { get; }

        /// <inheritdoc cref="global::System.IO.Path.VolumeSeparatorChar"/>
        char VolumeSeparatorChar { get; }

        /// <inheritdoc cref="global::System.IO.Path.PathSeparator"/>
        char PathSeparator { get; }

        /// <inheritdoc cref="global::System.IO.Path.InvalidPathChars"/>
        [global::System.ObsoleteAttribute("Path.InvalidPathChars has been deprecated. Use GetInvalidPathChars or GetInvalidFileNameChars instead.")] 
        char[] InvalidPathChars { get; }

        /// <inheritdoc cref="global::System.IO.Path.ChangeExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? ChangeExtension(string? path, string? extension);

        /// <inheritdoc cref="global::System.IO.Path.Exists"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool Exists([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetDirectoryName"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetDirectoryName(string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetDirectoryName"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.ReadOnlySpan<char> GetDirectoryName(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.GetExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetExtension(string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.ReadOnlySpan<char> GetExtension(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.GetFileName"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetFileName(string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetFileName"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.ReadOnlySpan<char> GetFileName(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.GetFileNameWithoutExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetFileNameWithoutExtension(string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetFileNameWithoutExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.ReadOnlySpan<char> GetFileNameWithoutExtension(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.GetRandomFileName"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetRandomFileName();

        /// <inheritdoc cref="global::System.IO.Path.IsPathFullyQualified"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool IsPathFullyQualified(string path);

        /// <inheritdoc cref="global::System.IO.Path.IsPathFullyQualified"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool IsPathFullyQualified(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.HasExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool HasExtension([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] string? path);

        /// <inheritdoc cref="global::System.IO.Path.HasExtension"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool HasExtension(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.Combine"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Combine(string path1, string path2);

        /// <inheritdoc cref="global::System.IO.Path.Combine"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Combine(string path1, string path2, string path3);

        /// <inheritdoc cref="global::System.IO.Path.Combine"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Combine(string path1, string path2, string path3, string path4);

        /// <inheritdoc cref="global::System.IO.Path.Combine"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Combine(params string[] paths);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(global::System.ReadOnlySpan<char> path1, global::System.ReadOnlySpan<char> path2);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(global::System.ReadOnlySpan<char> path1, global::System.ReadOnlySpan<char> path2, global::System.ReadOnlySpan<char> path3);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(global::System.ReadOnlySpan<char> path1, global::System.ReadOnlySpan<char> path2, global::System.ReadOnlySpan<char> path3, global::System.ReadOnlySpan<char> path4);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(string? path1, string? path2);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(string? path1, string? path2, string? path3);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(string? path1, string? path2, string? path3, string? path4);

        /// <inheritdoc cref="global::System.IO.Path.Join"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string Join(params string?[] paths);

        /// <inheritdoc cref="global::System.IO.Path.TryJoin"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool TryJoin(global::System.ReadOnlySpan<char> path1, global::System.ReadOnlySpan<char> path2, global::System.Span<char> destination, out int charsWritten);

        /// <inheritdoc cref="global::System.IO.Path.TryJoin"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool TryJoin(global::System.ReadOnlySpan<char> path1, global::System.ReadOnlySpan<char> path2, global::System.ReadOnlySpan<char> path3, global::System.Span<char> destination, out int charsWritten);

        /// <inheritdoc cref="global::System.IO.Path.GetRelativePath"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetRelativePath(string relativeTo, string path);

        /// <inheritdoc cref="global::System.IO.Path.TrimEndingDirectorySeparator"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string TrimEndingDirectorySeparator(string path);

        /// <inheritdoc cref="global::System.IO.Path.TrimEndingDirectorySeparator"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.ReadOnlySpan<char> TrimEndingDirectorySeparator(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.EndsInDirectorySeparator"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool EndsInDirectorySeparator(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.EndsInDirectorySeparator"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool EndsInDirectorySeparator([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetInvalidFileNameChars"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        char[] GetInvalidFileNameChars();

        /// <inheritdoc cref="global::System.IO.Path.GetInvalidPathChars"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        char[] GetInvalidPathChars();

        /// <inheritdoc cref="global::System.IO.Path.GetFullPath"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetFullPath(string path);

        /// <inheritdoc cref="global::System.IO.Path.GetFullPath"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetFullPath(string path, string basePath);

        /// <inheritdoc cref="global::System.IO.Path.GetTempPath"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetTempPath();

        /// <inheritdoc cref="global::System.IO.Path.GetTempFileName"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string GetTempFileName();

        /// <inheritdoc cref="global::System.IO.Path.IsPathRooted"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool IsPathRooted([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] string? path);

        /// <inheritdoc cref="global::System.IO.Path.IsPathRooted"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool IsPathRooted(global::System.ReadOnlySpan<char> path);

        /// <inheritdoc cref="global::System.IO.Path.GetPathRoot"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        string? GetPathRoot(string? path);

        /// <inheritdoc cref="global::System.IO.Path.GetPathRoot"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.ReadOnlySpan<char> GetPathRoot(global::System.ReadOnlySpan<char> path);

    }
}
#pragma warning restore
