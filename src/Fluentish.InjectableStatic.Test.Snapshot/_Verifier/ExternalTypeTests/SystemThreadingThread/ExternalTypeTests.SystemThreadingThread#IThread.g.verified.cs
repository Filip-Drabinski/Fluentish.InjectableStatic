//HintName: IThread.g.cs
// <auto-generated />
#nullable enable
#pragma warning disable
namespace Fluentish.Injectable.System.Threading
{
    /// <inheritdoc cref="global::System.Threading.Thread"/>
    public interface IThread
    {
        /// <inheritdoc cref="global::System.Threading.Thread.SpinWait"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void SpinWait(int iterations);

        /// <inheritdoc cref="global::System.Threading.Thread.Yield"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        bool Yield();

        /// <inheritdoc cref="global::System.Threading.Thread.Sleep"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void Sleep(int millisecondsTimeout);

        /// <inheritdoc cref="global::System.Threading.Thread.ResetAbort"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.ObsoleteAttribute("Thread.ResetAbort is not supported and throws PlatformNotSupportedException.", DiagnosticId = "SYSLIB0006", UrlFormat = "https://aka.ms/dotnet-warnings/{0}")]
        void ResetAbort();

        /// <inheritdoc cref="global::System.Threading.Thread.BeginCriticalRegion"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void BeginCriticalRegion();

        /// <inheritdoc cref="global::System.Threading.Thread.EndCriticalRegion"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void EndCriticalRegion();

        /// <inheritdoc cref="global::System.Threading.Thread.BeginThreadAffinity"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void BeginThreadAffinity();

        /// <inheritdoc cref="global::System.Threading.Thread.EndThreadAffinity"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void EndThreadAffinity();

        /// <inheritdoc cref="global::System.Threading.Thread.AllocateDataSlot"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.LocalDataStoreSlot AllocateDataSlot();

        /// <inheritdoc cref="global::System.Threading.Thread.AllocateNamedDataSlot"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.LocalDataStoreSlot AllocateNamedDataSlot(string name);

        /// <inheritdoc cref="global::System.Threading.Thread.GetNamedDataSlot"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.LocalDataStoreSlot GetNamedDataSlot(string name);

        /// <inheritdoc cref="global::System.Threading.Thread.FreeNamedDataSlot"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void FreeNamedDataSlot(string name);

        /// <inheritdoc cref="global::System.Threading.Thread.GetData"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        object? GetData(global::System.LocalDataStoreSlot slot);

        /// <inheritdoc cref="global::System.Threading.Thread.SetData"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void SetData(global::System.LocalDataStoreSlot slot, object? data);

        /// <inheritdoc cref="global::System.Threading.Thread.GetDomain"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        global::System.AppDomain GetDomain();

        /// <inheritdoc cref="global::System.Threading.Thread.GetDomainID"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        int GetDomainID();

        /// <inheritdoc cref="global::System.Threading.Thread.MemoryBarrier"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void MemoryBarrier();

        /// <inheritdoc cref="global::System.Threading.Thread.Sleep"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void Sleep(global::System.TimeSpan timeout);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        byte VolatileRead(ref byte address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        double VolatileRead(ref double address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        short VolatileRead(ref short address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        int VolatileRead(ref int address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        long VolatileRead(ref long address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        nint VolatileRead(ref nint address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        object? VolatileRead([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("address")] ref object? address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        sbyte VolatileRead(ref sbyte address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        float VolatileRead(ref float address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        ushort VolatileRead(ref ushort address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        uint VolatileRead(ref uint address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        ulong VolatileRead(ref ulong address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileRead"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        nuint VolatileRead(ref nuint address);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref byte address, byte value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref double address, double value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref short address, short value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref int address, int value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref long address, long value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref nint address, nint value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("value")] ref object? address, object? value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        void VolatileWrite(ref sbyte address, sbyte value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        void VolatileWrite(ref float address, float value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        void VolatileWrite(ref ushort address, ushort value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        void VolatileWrite(ref uint address, uint value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        void VolatileWrite(ref ulong address, ulong value);

        /// <inheritdoc cref="global::System.Threading.Thread.VolatileWrite"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        [global::System.CLSCompliantAttribute(false)]
        void VolatileWrite(ref nuint address, nuint value);

        /// <inheritdoc cref="global::System.Threading.Thread.GetCurrentProcessorId"/>
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        int GetCurrentProcessorId();

        /// <inheritdoc cref="global::System.Threading.Thread.CurrentPrincipal"/>
        global::System.Security.Principal.IPrincipal? CurrentPrincipal { get; set; }

        /// <inheritdoc cref="global::System.Threading.Thread.CurrentThread"/>
        global::System.Threading.Thread CurrentThread { get; }

    }
}
#pragma warning restore
